offspringlist
offspringlist = as.data.frame("n", "userId")
offspringlist
t1 = as.data.frame(1, "789")
rbind(offspringlist, t1)
offspringlist = c("n", "userId")
offspringlist
t1 = c(1, "789")
rbind(offspringlist, t1)
offspringlist = list()
rbind(offspringlist, t1)
offspringlist = list()
for (n in 1:3){
counts = ana2$reposts_count[n]
result = statuses.repost_timeline(roauth, id = as.character(ana2$mid)[[n]], count = counts   )
for (m in 1:counts){
offspring = result[[m]]$user$idstr
addin = c(n, m, offspring)
offspringlist = rbind(offspringlist, addin)}
}
offspringlist
roauth$getLimits(TRUE)
length(ana2$mid)
offspringlist = list()
for (n in 1:length(ana2$mid)){
counts = ana2$reposts_count[n]
result = statuses.repost_timeline(roauth, id = as.character(ana2$mid)[[n]], count = counts   )
for (m in 1:counts){
offspring = result[[m]]$user$idstr
addin = c(n, m, offspring)
offspringlist = rbind(offspringlist, addin)}
}
offspringlist
dim(offspringlist)
as.data.frame(offspringlist) # 141
class(offspringlist)
as.data.frame(offspringlist) # 141
as.data.frame(offspringlist[1:3]) # 141
m = offspringlist
data.frame(col = rep(colnames(m), each = nrow(m)),
row = rep(rownames(m), ncol(m)),
value = as.vector(m))
as.data.frame(offspringlist, row.names = NULL) # 141
?as.data.frame
roauth$getLimits(TRUE)
data.frame(offspringlist, nrow=261, byrow=T))
data.frame(offspringlist, nrow=261, byrow=T)
data.frame(offspringlist, nrow=262, byrow=T)
data = data.frame(offspringlist, nrow=262, byrow=T)
data
data = data.frame(offspringlist, nrow=262, byrow=T)[,1:3]
data
names(data) = c("n", "m", "offsprindg")
sum(ana2$reposts_count)
names(data) = c("n", "m", "offspring")
data
names(ana2)
ana2$User_idstr
dat = ana2$User_idstr
class(data)
class(dat)
dat = data.frame(ana2$User_idstr)
dat
dat$n = c(1:length(ana2$User_idstr))
dat
names(dat) = c("source", "n")
head(data)
data = merge(data, dat, by = "n")
data = merge(data, dat, by = list("n"))
dats = merge(dat, data, by = list("n"))
?merge
dats = merge(dat, data, by = c("n"))
dats
unique(ana1$User_idstr)
length(unique(ana1$User_idstr))
head(dats)
idsUnique = unique(ana1$User_idstr)# 870 unique diffusers
subset(ana1, ana1$User_idstr == 1869170057)
?select
??select
head(dats)
subset(idsUnique, !(idsUnique %in% dats$offspring) )
idsWithoutSource = subset(idsUnique, !(idsUnique %in% dats$offspring) )
rbind(idsWithoutSource, 1869170057)
as.data.frame(rbind(idsWithoutSource, 1869170057))
as.data.frame(cbind(idsWithoutSource, 1869170057))
datw = as.data.frame(cbind(1869170057,idsWithoutSource))
datw
head(dats)
dat1 = dats[,c('source','offspring')]
head(dat1)
dat2 = as.data.frame(cbind(1869170057,idsWithoutSource))
head(dat2)
names(dat2) = c("source", "offspring")
dat3 = cbind(dat1, dat2)
dat3 = rbind(dat1, dat2)
dim(dat3)
install.packages("igraph")
library(igraph)
g<-graph.data.frame(dat3)
l<-layout.fruchterman.reingold(g)
plot(g, vertex.label= NA,edge.arrow.size=0.02,
layout=l )
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
g1<-graph.data.frame(dat1)
l1<-layout.fruchterman.reingold(g1)
g1<-graph.data.frame(dat1)
l1<-layout.fruchterman.reingold(g1)
plot(g1, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l1 )
png("d:/repostGraph.png",
width=5, height=5,
units="in", res=700)
dev.off()
png("d:/repostGraph.png",
width=5, height=5,
units="in", res=700)
plot(g1, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l1 )
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=5, height=5,
units="in", res=700)
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 绘制图片
plot(g1, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l1 )
# 结束保存图片
dev.off()
dev.off()
# 保存图片格式
png("d:/repostGraph1.png",
width=5, height=5,
units="in", res=700)
# 绘制图片
plot(g1, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l1 )
# 结束保存图片
dev.off()
write.csv(dat1, "D:/github/css/part05/chapter11/code/repost3575234466298494SecondStep.csv",row.names = F)
write.csv(dat1, "D:/github/css/part05/chapter11/code/repost3575234466298494SecondStep.csv",row.names = F)
dat1
class(dat1)
write.csv(dat1, "D:/github/css/part05/chapter11/code/repost3575234466298494SecondStep.csv")
write.csv(dat1, "D:/github/css/part05/chapter11/code/secondStepRepost.csv")
write.csv(dat3, "D:/github/css/part05/chapter11/code/firstStepRepost.csv")
names(dat1
)
class(dat3)
?write.csv
write.table(dat1, "D:/github/css/part05/chapter11/code/secondStepRepost.csv")
write.csv(as.data.frame(dat1), "D:/github/css/part05/chapter11/code/secondStepRepost.csv")
write.csv(as.data.frame(dat1), "D:/github/css/part05/chapter11/code/secondStepRepost.csv", fileEncoding = "UTF-16")
findSource = function(n){
res1=strapply(ana1$text[n], paste("\\w*", "//@", "\\w*", sep = ""), c, simplify = unlist)
res2 = ifelse(is.null(res1) == TRUE, 0,unlist(strsplit(res1[1], "@"))[2] )
return(res2)
}
ss = unlist(lapply(c(1:length(ana1$text)), findSource))
ss
names(ana1)
rbind(ana1$User_screen_name, ss)
cbind(ana1$User_screen_name, ss)
as.data.frame(cbind(ss, ana1$User_screen_name))
dat4 = as.data.frame(cbind(ss, ana1$User_screen_name))
names(dat4)
source = unlist(lapply(c(1:length(ana1$text)), findSource))
dat4 = as.data.frame(cbind(source, ana1$User_screen_name))
head(dat4)
ifesle(dat4$source ==0, "统计之都"， dat4$source)
ifelse(dat4$source ==0, "统计之都"， dat4$source)
dat4$source
dat4$source[1]
as.character(dat4$source)[1]
source = list()
for (n in as.characer(dat4$source)){
addin = ifelse(n  == "0","统计之都"，n )
source = c(source, addin)
}
dat4$source[as.character(dat4$source) == "0"] = "统计之都"
dat4
g<-graph.data.frame(dat4)
g4<-graph.data.frame(dat4)
l<-layout.fruchterman.reingold(g4)
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
png("d:/repostGraphParse.png",
width=5, height=5,
units="in", res=700)
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
dat5 = subset(dat4, dat4$source == "统计之都")
dim(dat5)
g4<-graph.data.frame(dat4)
# 保存图片格式
png("d:/repostGraphParse.png",
width=5, height=5,
units="in", res=700)
plot(g4, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
g5<-graph.data.frame(dat5)
l<-layout.fruchterman.reingold(g5)
# 保存图片格式
png("d:/repostGraphParse2.png",
width=5, height=5,
units="in", res=700)
plot(g5, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
dat5 = subset(dat4, dat4$source != "统计之都")
g5<-graph.data.frame(dat5)
l<-layout.fruchterman.reingold(g5)
# 保存图片格式
png("d:/repostGraphParse2.png",
width=5, height=5,
units="in", res=700)
plot(g5, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
head(dats)
offspring = subset(dats$offspring, dats$offspring != dats$source)
idsWithoutSource = subset(idsUnique, !(idsUnique %in% offspring) )
dat2 = as.data.frame(cbind(1869170057,idsWithoutSource))
names(dat2) = c("source", "offspring")
dat3 = rbind(dat1, dat2)
g<-graph.data.frame(dat3)
l<-layout.fruchterman.reingold(g)
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
g1<-graph.data.frame(dat1)
l1<-layout.fruchterman.reingold(g1)
plot(g1, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l1 )
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
?igraph
clusters(g)
clusters(g)$no
write.csv(as.data.frame(dat1), "D:/github/css/part05/chapter11/code/secondStepRepost.csv", fileEncoding = "UTF-16")
write.csv(dat3, "D:/github/css/part05/chapter11/code/firstStepRepost.csv")
clusters(g)$membership
!clusters(g)$membership
!(clusters(g)$membership)
length(ana1$User_str)
length(ana1$User_idstr)
length(unique(ana1$User_idstr))
1020-139/1020
(1020-139)/1020
png("d:/repostGraph.png",
width=5, height=5,
units="in", res=700)
plot(g, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
png("d:/repostGraph2step.png",
width=5, height=5,
units="in", res=700)
# 绘制图片
plot(g1, vertex.label= NA,edge.arrow.size=0.02,vertex.size = 0.5,
layout=l1 )
# 结束保存图片
dev.off()
plot(g1, vertex.label= NA,edge.arrow.size=0.03,vertex.size = 0.5,
layout=l1 )
plot(g1, vertex.label= NA,edge.arrow.size=0.5,vertex.size = 0.5,
layout=l1 )
plot(g1, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l1 )
plot(g, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l )
plot(g1, vertex.label= NA,edge.arrow.size=0.1,vertex.size = 0.5,
layout=l1 )
plot(g, vertex.label= NA,edge.arrow.size=0.1,vertex.size = 0.5,
layout=l )
plot(g, vertex.label= NA,edge.arrow.size=0.15,vertex.size = 0.5,
layout=l )
plot(g, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l )
# 保存图片格式
png("d:/repostGraph.png",
width=5, height=5,
units="in", res=700)
plot(g, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=700)
plot(g, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=700)
plot(g, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=500)
plot(g, vertex.label= NA,edge.arrow.size=0.2,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=500)
plot(g, vertex.label= NA,edge.arrow.size=0.15,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=500)
plot(g, vertex.label= NA,edge.arrow.size=0.1,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
plot(g, vertex.label= NA,edge.size = 0.01, edge.arrow.size=0.1,vertex.size = 0.5,
layout=l )
plot(g, vertex.label= NA,edge.width = 0.01, edge.arrow.size=0.1,vertex.size = 0.5,
layout=l )
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=500)
plot(g, vertex.label= NA,edge.width = 0.01, edge.arrow.size=0.1,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=500)
plot(g, vertex.label= NA,edge.width = 0.01, edge.arrow.size=0.08,vertex.size = 0.5,
layout=l )
# 结束保存图片
dev.off()
V(g)$name
length(V(g)$name)
length(unique(V(g)$name))
seq_len
?seq_len
degree(g, v=V(g), mode = c("out"),loops = TRUE, normalized = FALSE)
V(g)
V(g)$size = degree(g, v=V(g), mode = c("out"))
names(ana1)
nodeName = ana1[,c("User_idstr", "User_screeen_name")]
nodeName = ana1[,c("User_idstr", "User_screen_name")]
dim(nodeName)
dim(unique(nodeName))
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
dim(nodeName)
?sort
node = V(g)$name
node = as.data.frame(V(g)$name)
node
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr")
head(nodeLabel)
tail(nodeLabel)
?merge
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F)
head(nodeLabel)
plot(g, vertex.label=nodeLabel ,edge.width = 0.01, edge.arrow.size=0.08,vertex.size = V(g)$size ,
layout=l )
vertex<-as.numeric(V(g1)$name)
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
node = as.data.frame(V(g1)$name)
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F)
V(g1)$size = degree(g1, v=V(g1), mode = c("out"))
plot(g1, vertex.label= na,edge.arrow.size=0.1,vertex.size = V(g1)$size,
layout=l1 )
plot(g1, vertex.label= NA,edge.arrow.size=0.1,vertex.size = V(g1)$size,
layout=l1 )
log1
log(1)
V(g1)$size = log(degree(g1, v=V(g1), mode = c("out")) +1)
plot(g1, vertex.label= NA,edge.arrow.size=0.1,vertex.size = V(g1)$size,
layout=l1 )
V(g1)$size = degree(g1, v=V(g1), mode = c("out"))
plot(g1, vertex.label= NA,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F, all = FALSE)
dim(nodeLabel)
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
head(nodeLabel)
merge(node, nodeName, by = "User_idstr", sort = F, all = FALSE)[,2]
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F, all = FALSE)[,2]
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
plot(g1, vertex.label= NA,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
vertex<-as.numeric(V(g)$name)
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
node = as.data.frame(V(g)$name)
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F)[,2]
V(g)$size = degree(g, v=V(g), mode = c("out"))
V(g)$size = log(degree(g, v=V(g), mode = c("out"))  + 1 )
plot(g, vertex.label= NA,edge.width = 0.01, edge.arrow.size=0.08,vertex.size = V(g)$size , layout=l )
V(g)$size
nodeLabel
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F)
head(nodeLabel)
nodeLabel$nodeSize = V(g)$size
head(nodeLabel)
subset(nodeLabel$nodeSize, nodeLabel$nodeSize > 1)
nodeLabel$User_screen_name)[nodeLabel$nodeSize > 1]=""
nodeLabel$User_screen_name[nodeLabel$nodeSize > 1]=""
nodeLabel
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
node = as.data.frame(V(g)$name)
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F)
nodeLabel$nodeSize = V(g)$size
nodeLable
nodeLabel
nodeLabel$User_screen_name[nodeLabel$nodeSize > 1]=""
nodeLabel
nodeLabel$User_screen_name[nodeLabel$nodeSize > 1]=""
nodeLabel
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
node = as.data.frame(V(g)$name)
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F)
nodeLabel$nodeSize = V(g)$size
nodeLabel$User_screen_name[nodeLabel$nodeSize < 1]=""
nodeLabel
nodeLabel = nodeLabel$User_screen_name
plot(g, vertex.label= nodeLabel,edge.width = 0.01, edge.arrow.size=0.08,vertex.size = V(g)$size , layout=l )
png("d:/repostGraph.png",
width=8, height=8,
units="in", res=500)
plot(g, vertex.label= nodeLabel,edge.width = 0.01, edge.arrow.size=0.08,vertex.size = V(g)$size , layout=l )
# 结束保存图片
dev.off()
vertex<-as.numeric(V(g1)$name)
V(g1)$size = degree(g1, v=V(g1), mode = c("out"))
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
node = as.data.frame(V(g1)$name)
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F, all = FALSE)
nodeLabel$nodeSize = V(g1)$size
nodeLabel$User_screen_name[nodeLabel$nodeSize < 1]=""
nodeLabel = nodeLabel$User_screen_name
nodeLabel$User_screen_name[log(nodeLabel$nodeSize+1) < 1]=""
vertex<-as.numeric(V(g1)$name)
V(g1)$size = degree(g1, v=V(g1), mode = c("out"))
nodeName = unique(ana1[,c("User_idstr", "User_screen_name")])
node = as.data.frame(V(g1)$name)
names(node) = c("User_idstr")
nodeLabel = merge(node, nodeName, by = "User_idstr", sort = F, all = FALSE)
nodeLabel$nodeSize = V(g1)$size
nodeLabel$User_screen_name[log(nodeLabel$nodeSize+1) < 1]=""
nodeLabel = nodeLabel$User_screen_name
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
# 保存图片格式
png("d:/repostGraph2step.png",
width=5, height=5,
units="in", res=700)
# 绘制图片
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph2step.png",
width=8, height=8,
units="in", res=700)
# 绘制图片
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
# 结束保存图片
dev.off()
# 保存图片格式
png("d:/repostGraph2step.png",
width=8, height=8,
units="in", res=500)
# 绘制图片
plot(g1, vertex.label= nodeLabel,edge.arrow.size=0.1,vertex.size = V(g1)$size, layout=l1 )
# 结束保存图片
dev.off()
data3
dat3
dat1
q()
require(knitr)
install.packages("knitr")
require(knitr)
setwd("d:/github/slides/slidify")
library(slidify)
library(slidify)
slidify(cc_revealjs.Rmd)
slidify("cc_revealjs.Rmd")
